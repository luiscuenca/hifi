<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  skin_model_normal_map_dq.vert
//  vertex shader
//
//  Created by Andrzej Kapolka on 10/29/13.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Inputs.slh@>
<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<@include render-utils/ShaderConstants.h@>
<$declareStandardTransform()$>

<@include Skinning.slh@>
<$declareUseDualQuaternionSkinning(1)$>

<@include graphics/MaterialTextures.slh@>
<$declareMaterialTexMapArrayBuffer()$>

layout(location=RENDER_UTILS_ATTR_POSITION_ES) out vec4 _positionES;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) out vec4 _texCoord01;
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) out vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_TANGENT_WS) out vec3 _tangentWS;
layout(location=RENDER_UTILS_ATTR_COLOR) out vec4 _color;

void main(void) {
    vec4 position = vec4(0.0, 0.0, 0.0, 0.0);
    vec4 interpolatedNormal = vec4(0.0, 0.0, 0.0, 0.0);
    vec4 interpolatedTangent = vec4(0.0, 0.0, 0.0, 0.0);

    skinPositionNormalTangent(inSkinClusterIndex, inSkinClusterWeight, inPosition, inNormal.xyz, inTangent.xyz, position, interpolatedNormal.xyz, interpolatedTangent.xyz);

    // pass along the color
    _color.rgb = color_sRGBToLinear(inColor.rgb);
    _color.a = inColor.a;

    TexMapArray texMapArray = getTexMapArray();
    <$evalTexMapArrayTexcoord0(texMapArray, inTexCoord0, _texCoord01.xy)$>
    <$evalTexMapArrayTexcoord1(texMapArray, inTexCoord0, _texCoord01.zw)$>

    interpolatedNormal = vec4(normalize(interpolatedNormal.xyz), 0.0);
    interpolatedTangent = vec4(normalize(interpolatedTangent.xyz), 0.0);

    // standard transform
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToEyeAndClipPos(cam, obj, position, _positionES, gl_Position)$>
    <$transformModelToWorldDir(cam, obj, interpolatedNormal.xyz, interpolatedNormal.xyz)$>
    <$transformModelToWorldDir(cam, obj, interpolatedTangent.xyz, interpolatedTangent.xyz)$>

    _normalWS = interpolatedNormal.xyz;
    _tangentWS = interpolatedTangent.xyz;
}
