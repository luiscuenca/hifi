<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_translucent_unlit.frag
//  fragment shader
//
//  Created by Zach Pomerantz on 2/3/2016.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include graphics/Material.slh@>

<@include graphics/MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, _SCRIBE_NULL, EMISSIVE, OCCLUSION)$>
<@include LightingModel.slh@>

<@include render-utils/ShaderConstants.h@>

layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;

layout(location=0) out vec4 _fragColor;

void main(void) {
    Material mat = getMaterial();
    BITFIELD matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex)$>

    float opacity = getMaterialOpacity(mat) * _color.a;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;
    <$discardInvisible(opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color.rgb;

    _fragColor = vec4(albedo * isUnlitEnabled(), opacity);
}
