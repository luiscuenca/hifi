<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_fade.vert
//  vertex shader
//
//  Created by Olivier Prat on 06/04/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Inputs.slh@>
<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include Fade.slh@>
<$declareFadeVertexInstanced()$>

<@include render-utils/ShaderConstants.h@>

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) out vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_NORMAL_MS) out vec3 _normalMS;
layout(location=RENDER_UTILS_ATTR_COLOR) out vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) out vec4 _texCoord01;
layout(location=RENDER_UTILS_ATTR_POSITION_MS) out vec4 _positionMS;
layout(location=RENDER_UTILS_ATTR_POSITION_ES) out vec4 _positionES;
layout(location=RENDER_UTILS_ATTR_POSITION_WS) out vec4 _positionWS;

void main(void) {
    _color = color_sRGBAToLinear(inColor);
    _texCoord01.xy = inTexCoord0.st;
    _positionMS = inPosition;
    _normalMS = inNormal.xyz;

    // standard transform
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToEyeAndClipPos(cam, obj, inPosition, _positionES, gl_Position)$>
    <$transformModelToWorldPos(obj, inPosition, _positionWS)$>
    <$transformModelToWorldDir(cam, obj, inNormal.xyz, _normalWS)$>
    <$passThroughFadeObjectParams()$>
}